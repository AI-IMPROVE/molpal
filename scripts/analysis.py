from argparse import ArgumentParser

from experiment import Experiment
from utils import *


def format_num_list(xs: List[float]) -> str:
    return ', '.join(list(map(lambda x: f'{x:0.3f}', xs)))

if __name__ == "__main__":
    parser = ArgumentParser()
    parser.add_argument('-e', '--experiments', '--expts', nargs='+',
                        help='the top-level directory generated by the MolPAL run. I.e., the directory with the "data" and "chkpts" directories')
    parser.add_argument('-l', '--library',
                        help='the library file used for the corresponding MolPAL run.')
    parser.add_argument('--true-csv',
                        help='a CSV file containing the true scoring data')
    parser.add_argument('--smiles-col', type=int, default=0)
    parser.add_argument('--score-col', type=int, default=1)
    parser.add_argument('--no-title-line', action='store_true', default=False)
    parser.add_argument('--maximize', action='store_true', default=False,
                        help='whether the objective for which you are calculating performance should be maximized.')
    parser.add_argument('-N', type=int,
                        help='the number of top scores from which to calculate the reward')
    parser.add_argument('-r', '--reward',
                        choices=('scores', 'smis', 'top-k-ave', 'total-ave'),
                        help='the type of reward to calculate')

    args = parser.parse_args()
    args.title_line = not args.no_title_line

    smis = extract_smis(args.library, args.smiles_col, args.title_line)
    d_smi_idx = {smi: i for i, smi in enumerate(smis)}

    d_smi_score = build_true_dict(
        args.true_csv, args.smiles_col, args.score_col,
        args.title_line, args.maximize
    )

    true_smis_scores = sorted(d_smi_score.items(), key=lambda kv: kv[1])[::-1]
    true_top_k = true_smis_scores[:args.N]

    reward_curves = []
    for experiment in args.experiments:
        header_str = f"| {Path(experiment).stem} |"
        border_str = f"+{'-'*(len(header_str)-2)}+"

        print(f"{border_str}")
        print(f"{header_str}")
        print(f"{border_str}")

        experiment = Experiment(experiment, d_smi_idx)
        rewards = [
            experiment.calculate_reward(i, true_top_k, True)
            for i in range(experiment.num_iters)
        ]
        avgs, smis, scores = zip(*rewards)

        print(f"{'Average': >08}: {format_num_list(avgs)}")
        print(f"{'SMILES': >08}: {format_num_list(smis)}")
        print(f"{'Scores': >08}: {format_num_list(scores)}")
        print()

